/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.testgitlab.controller;

import com.example.testgitlab.model.CreateGitlabRepository400Response;
import com.example.testgitlab.model.CreateGitlabRepository404Response;
import com.example.testgitlab.model.CreateGitlabRepository500Response;
import com.example.testgitlab.model.GitlabRepositoryRequest;
import com.example.testgitlab.model.GitlabRepositoryResponse;
import com.example.testgitlab.model.TestRecordResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-19T23:31:53.753466418+02:00[Europe/Madrid]")
@Validated
@Tag(name = "gitlab", description = "Gitlab repository builder is capable of creating two branches, both master and develop")
public interface GitlabApi {

    /**
     * POST /api/v1/gitlab-repository : Endpoint to create a new repository using GitLab API.
     * :D
     *
     * @param gitlabRepositoryRequest  (required)
     * @return Repository created successfully (status code 200)
     *         or Request contains incorrect syntax or cannot be processed (status code 400)
     *         or The specified resource was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createGitlabRepository",
        summary = "Endpoint to create a new repository using GitLab API.",
        description = ":D",
        tags = { "gitlab" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Repository created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GitlabRepositoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request contains incorrect syntax or cannot be processed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/gitlab-repository",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default Mono<GitlabRepositoryResponse> _createGitlabRepository(
        @Parameter(name = "GitlabRepositoryRequest", description = "", required = true) @Valid @RequestBody Mono<GitlabRepositoryRequest> gitlabRepositoryRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return createGitlabRepository(gitlabRepositoryRequest, exchange);
    }

    // Override this method
    default  Mono<GitlabRepositoryResponse> createGitlabRepository(Mono<GitlabRepositoryRequest> gitlabRepositoryRequest,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"id\" : \"55196040\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(gitlabRepositoryRequest).then(Mono.empty());

    }


    /**
     * GET /api/v1/test-record : Endpoint to create a simple get using a record to process call from typicode server
     * :D
     *
     * @return Record created (status code 200)
     *         or Request contains incorrect syntax or cannot be processed (status code 400)
     *         or The specified resource was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "testUsingRecord",
        summary = "Endpoint to create a simple get using a record to process call from typicode server",
        description = ":D",
        tags = { "gitlab" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Record created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TestRecordResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request contains incorrect syntax or cannot be processed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGitlabRepository500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/test-record",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default Mono<TestRecordResponse> _testUsingRecord(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return testUsingRecord(exchange);
    }

    // Override this method
    default  Mono<TestRecordResponse> testUsingRecord( final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"id\" : \"2\", \"completed\" : false, \"title\" : \"quis ut nam facilis et officia qui\", \"userId\" : \"1\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
